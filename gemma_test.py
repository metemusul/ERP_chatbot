import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from peft import PeftModel

# âœ… Cihaz kontrolÃ¼
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"KullanÄ±lan cihaz: {device}")

# âœ… Model ve tokenizer yollarÄ±
base_model_path = "./local_models/gemma-2b-it"
finetuned_model_path = "./gemma-2b-it-lora-finetuned"

# âœ… Tokenizer ve Base model yÃ¼kle
tokenizer = AutoTokenizer.from_pretrained(base_model_path, trust_remote_code=True)
base_model = AutoModelForCausalLM.from_pretrained(base_model_path, trust_remote_code=True).to(device)

# âœ… PEFT modelini yÃ¼kle (doÄŸru yÃ¶ntem)
model = PeftModel.from_pretrained(base_model, finetuned_model_path)
model = model.merge_and_unload()  # LoRA katmanlarÄ±nÄ± entegre et (inference iÃ§in optimize)
model.eval()

# âœ… Prompt
instruction = "Yeni bir mÃ¼ÅŸteri eklemek iÃ§in hangi bilgileri girmem gerekir?"
input_text = ""
if input_text:
    prompt = f"Soru: {instruction}\nGirdi: {input_text}\nYanÄ±t:"
else:
    prompt = f"Soru: {instruction}\nYanÄ±t:"

# âœ… Tokenize et
inputs = tokenizer(prompt, return_tensors="pt").to(device)

# âœ… YanÄ±t Ã¼ret
with torch.no_grad():
    outputs = model.generate(
        **inputs,
        max_new_tokens=100,
        temperature=0.7,
        top_p=0.9,
        do_sample=True,
        pad_token_id=tokenizer.eos_token_id
    )

# âœ… Ã‡Ä±ktÄ±yÄ± yazdÄ±r
generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
print("\nğŸ“¢ Model YanÄ±tÄ±:")
print(generated_text)
